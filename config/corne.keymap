/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// Mouse speed configuration

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80    // default: 10

/ {
    // Mouse speed and acceleration settings

    behaviors {
        // Home row mod-tap timing configuration

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            time-to-max-speed-ms = <300>;
            acceleration-exponent = <2>;
        };

        msc {
            time-to-max-speed-ms = <150>;
            acceleration-exponent = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Left_Parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 8>;
        };

        Right_Parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 8>;
        };

        Left_Brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 3>;
        };

        Right_Brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <3 4>;
        };

        Left_Bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 27>;
        };

        Right_Bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <27 28>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <16 28>;
        };

        Underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <14 26>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <15 3>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <16 4>;
        };

        Single_Quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <2 3 4>;
        };

        Double_Quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <16 15 14>;
        };

        Caps_Word {
            bindings = <&caps_word>;
            key-positions = <26 27 28>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <19 7>;
        };

        Back_Slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <31 19>;
        };

        Less_Than {
            bindings = <&kp LESS_THAN>;
            key-positions = <20 32>;
        };

        Greater_Than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <20 8>;
        };

        Colon {
            bindings = <&kp COLON>;
            key-positions = <7 8 9>;
        };

        Semi_Colon {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 20 21>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <31 32 33>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <9 21>;
        };

        Slash {
            bindings = <&kp SLASH>;
            key-positions = <21 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                &kp Q       &kp W       &kp E        &kp R        &kp T          &kp Y         &kp U        &kp I        &kp O       &kp P          &kp BSPC
&mt LEFT_SHIFT ESC     &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHFT F  &kp G          &kp H         &hm RSHFT J  &hm RCTRL K  &hm RALT L  &hm RGUI SEMI  &kp SQT
&mt LG(GRAVE) LC(TAB)  &kp Z       &kp X       &kp C        &kp V        &kp B          &kp N         &kp M        &kp COMMA    &kp DOT     &kp FSLH       &lt 5 LG(TAB)
                                               &kp LGUI     &lt 1 TAB    &lt 2 SPACE    &lt 4 RETURN  &lt 3 BSPC   &lt 6 SPACE
            >;
        };

        NEAR_LEFT_LAYER {
            bindings = <
&trans  &trans    &trans    &trans  &trans     &trans    &mkp LCLK      &msc SCRL_LEFT  &msc SCRL_UP    &msc SCRL_DOWN  &msc SCRL_RIGHT  &mkp RCLK
&trans  &trans    &trans    &trans  &trans     &trans    &kp PAGE_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT  &trans
&trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans    &kp PAGE_DOWN  &trans          &trans          &trans          &trans           &trans
                            &trans  &trans     &trans    &trans         &trans          &trans
            >;
        };

        FAR_LEFT_LAYER {
            bindings = <
&trans  &kp LG(LS(LEFT_ARROW))  &kp LG(Z)  &kp LG(A)  &kp LG(LS(Z))  &kp LG(LS(RIGHT))    &trans  &trans          &trans    &trans        &trans     &trans
&trans  &kp LG(LEFT_ARROW)      &kp LG(X)  &kp LG(C)  &kp LG(V)      &kp LG(RIGHT)        &trans  &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans                  &trans     &trans     &trans         &trans               &trans  &trans          &trans    &trans        &trans     &trans
                                           &trans     &trans         &trans               &trans  &trans          &trans
            >;
        };

        NEAR_RIGHT_LAYER {
            bindings = <
&trans  &trans  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RPAR)    &trans  &trans          &trans          &trans        &trans           &trans
&trans  &trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &trans          &trans  &trans          &trans          &trans        &trans           &trans
&trans  &trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans          &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
                              &trans         &trans         &trans          &trans  &trans          &trans
            >;
        };

        FAR_RIGHT_LAYER {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &kp N0    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        BLUETOOTH_SETTING_LAYER {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_CLR  &bt BT_CLR_ALL  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &bootloader     &trans      &trans          &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans      &trans          &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans          &trans      &trans          &trans
            >;
        };

        QUICK_APPS_LAYER {
            bindings = <
&kp LA(SPACE)  &kp LG(LA(LS(NUMBER_1)))      &kp LG(LA(LS(NUMBER_2)))      &kp LG(LA(LS(NUMBER_3)))      &kp LC(LA(LG(NUMBER_4)))      &kp LA(LG(LS(N5)))        &kp LG(LS(LA(NUMBER_6)))      &kp LA(LG(LS(NUMBER_7)))  &kp LG(LA(LS(NUMBER_8)))  &kp LG(LA(LS(NUMBER_9)))  &kp LG(LS(LA(NUMBER_0)))  &kp LS(LA(LG(SPACE)))
&trans         &kp LS(LA(LC(LG(NUMBER_1))))  &kp LS(LA(LC(LG(NUMBER_2))))  &kp LS(LA(LC(LG(NUMBER_3))))  &kp LG(LC(LA(LS(NUMBER_4))))  &kp LS(LA(LC(LG(N5))))    &kp LA(LS(LC(LG(NUMBER_6))))  &kp LS(LA(LC(LG(N7))))    &kp LG(LA(LC(LS(N8))))    &kp LA(LS(LC(LG(N9))))    &kp LS(LC(LA(LG(N0))))    &trans
&trans         &kp LA(LG(NUMBER_1))          &trans                        &trans                        &trans                        &trans                    &trans                        &trans                    &trans                    &trans                    &trans                    &trans
                                                                           &trans                        &trans                        &trans                    &trans                        &trans                    &trans
            >;
        };
    };
};
